'use strict';

exports.small  = [ 0x55, 0x48, 0x8b, 0x05, 0xb8, 0x13, 0x00, 0x00 ];
exports.strcpy = [
  0x55, 0x31, 0xD2, 0x89, 0xE5, 0x8B, 0x45, 0x08, 0x56,
  0x8B, 0x75, 0x0C, 0x53, 0x8D, 0x58, 0xFF, 0x0F, 0xB6,
  0x0C, 0x16, 0x88, 0x4C, 0x13, 0x01, 0x83, 0xC2, 0x01,
  0x84, 0xC9, 0x75, 0xF1, 0x5B, 0x5E, 0x5D, 0xC3
]
exports.pushEachReg = [ 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57 ]

exports.addiw = [
    0x66, 0x05, 0xf1, 0x0f
  , 0x66, 0x81, 0xc1, 0xf1, 0x0f
  , 0x66, 0x81, 0xc2, 0xf1, 0x0f
  , 0x66, 0x81, 0xc3, 0xf1, 0x0f
  , 0x66, 0x81, 0xc4, 0xf1, 0x0f
  , 0x66, 0x81, 0xc5, 0xf1, 0x0f
  , 0x66, 0x81, 0xc6, 0xf1, 0x0f
  , 0x66, 0x81, 0xc7, 0xf1, 0x0f
  , 0x66, 0x83, 0xc0, 0x01
  , 0x66, 0x83, 0xc1, 0x01
  , 0x66, 0x83, 0xc2, 0x01
  , 0x66, 0x83, 0xc3, 0x01
  , 0x66, 0x83, 0xc4, 0x01
  , 0x66, 0x83, 0xc5, 0x01
  , 0x66, 0x83, 0xc6, 0x01
  , 0x66, 0x83, 0xc7, 0x01
  , 0x66, 0xb8, 0xff, 0x7f
  , 0x66, 0x83, 0xc0, 0x01
  , 0x66, 0x83, 0xc0, 0x01
  , 0x66, 0xb8, 0xff, 0xff
  , 0x66, 0x83, 0xc0, 0x01
  , 0x66, 0x83, 0xc0, 0x01
  , 0x66, 0xbb, 0xff, 0x7f
  , 0x66, 0x83, 0xc3, 0x01
  , 0x66, 0x83, 0xc3, 0x01
  , 0x66, 0xbb, 0xff, 0xff
  , 0x66, 0x83, 0xc3, 0x01
  , 0x66, 0x83, 0xc3, 0x01
  , 0x66, 0xb8, 0xff, 0x6f
  , 0x66, 0x83, 0xc0, 0x02
  , 0x66, 0x83, 0xc0, 0x02
  , 0x66, 0xb8, 0xfe, 0xff
  , 0x66, 0x83, 0xc0, 0x02
  , 0x66, 0x83, 0xc0, 0x02
  , 0x66, 0xb9, 0xff, 0x6f
  , 0x66, 0x83, 0xc1, 0x02
  , 0x66, 0x83, 0xc1, 0x02
  , 0x66, 0xb9, 0xfd, 0xff
  , 0x66, 0x83, 0xc1, 0x03
  , 0x66, 0x83, 0xc1, 0x05
]

exports.mix_01 = [
    0xb8, 0xff, 0xff, 0xff, 0x7f
  , 0x83, 0xc0, 0x01
  , 0x83, 0xc0, 0x01
  , 0xb3, 0x02
  , 0xfe, 0xcb
  , 0xfe, 0xcb
  , 0x53
  , 0x66, 0xb8, 0xff, 0x7f
  , 0x66, 0x40
  , 0x66, 0x48
  , 0x5b
  , 0x66, 0x05, 0xf1, 0x0f
  , 0x66, 0x81, 0xc1, 0xf1, 0x0f
  , 0x66, 0x81, 0xc4, 0xf1, 0x0f
  , 0x66, 0x81, 0xc5, 0xf1, 0x0f
  , 0x66, 0x81, 0xc6, 0xf1, 0x0f
  , 0x66, 0x81, 0xc7, 0xf1, 0x0f
  , 0x42
  , 0x4b
  , 0x89, 0xd0
  , 0x89, 0xd9
]

/* strcpy
0x100  '55'           push   ebp
0x101  '31 d2'        xor    edx, edx
0x103  '89 e5'        mov    ebp, esp
0x105  '8b 45 08'     mov    eax, dword ptr [ebp + 8]
0x108  '56'           push   esi
0x109  '8b 75 0c'     mov    esi, dword ptr [ebp + 0xc]
0x10c  '53'           push   ebx
0x10d  '8d 58 ff'     lea    ebx, dword ptr [eax - 1]
0x110  '0f b6 0c 16'  movzx  ecx, byte ptr [esi + edx]
0x114  '88 4c 13 01'  mov    byte ptr [ebx + edx + 1], cl
0x118  '83 c2 01'     add    edx, 1
0x11b  '84 c9'        test   cl, cl
0x11d  '75 f1'        jne    0x110
0x11f  '5b'           pop    ebx
0x120  '5e'           pop    esi
0x121  '5d'           pop    ebp
0x122  'c3'           ret
*/
